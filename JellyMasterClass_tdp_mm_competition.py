# -*- coding: utf-8 -*-
"""TDP MM Competition

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/armen-tdp-mm-competition-1c9c7df2-ecb0-4a23-ac53-e286a76cdfe1.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250312/auto/storage/goog4_request%26X-Goog-Date%3D20250312T185416Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D24beacdf9a7d282747c8bf41b1a459f60ddd81de0483748d55f78edbc2c6458dc7fc190f800c8a1da104939364fac4373bbd62cd484040d54719d005b226c08bf3a2f15df3ed7b4cd029efc4fb5fab1d4b43366da80e05d3bc21716abfecf7559749e1307f0888716fee438f72d853ff3c85a8ea42b9283a9aeb6fd900eb4eb5c0f5a0e5f4c144418792bea9a28049316016e48818b87e2944269ad6b055550742cd91c097a10bc0a340bbf5025bc2eb1320a4d8625c633a69b69aae13c0ea44fa6990aa9333d6fd4e4f9eb758b78c9c44ad9a4eae437a0894849477bd71c2554d79cfb4a68d2db3b98bdc26f0d1ffbc06298339d8213fb386b5fd4e8b3d57c9
"""

# Install and import the required data and libraries!
!pip install fuzzywuzzy
!wget -q -nc https://raw.githubusercontent.com/jakesanghavi/TDP_March_Tournament_2025/main/helper_functions.py
!wget -q -nc https://raw.githubusercontent.com/jakesanghavi/TDP_March_Tournament_2025/main/logos.csv
!wget -q -nc https://raw.githubusercontent.com/jakesanghavi/TDP_March_Tournament_2025/main/ncaa_name_mapper.csv
!wget -q -nc https://raw.githubusercontent.com/jakesanghavi/TDP_March_Tournament_2025/main/tournament_data.csv
!wget -q -nc https://raw.githubusercontent.com/jakesanghavi/TDP_March_Tournament_2025/main/Arial.ttf
from helper_functions import *
import pandas as pd

"""# Helpful Functions!

### Welcome to the 2025 TDP college basketball bracket challenge!

We hope to make this event as accessible as possible, to both people who have done predictive modeling and those who haven't! You may use whatever resources you want (Ask AT&T, friends, StackOverflow, etc.).

### How to Submit

Please submit to us via Teams or email your completed bracket, and just copy and paste your predictions (as text) to us to!

### helper_functions

We have provided a helper notebook (`helper_functions.py`) and included a bunch of helpful pre-built tools for you.

`simulate_tournament(2025_data, model)`: this function takes in the 2025 round 1 matchups and runs your model on them, all the way through the end of the tournament! Ex. predicts round 1 winners with your model, moves them on to round 2, moves those winners to round 3, etc.

We only built this to support data being a `pandas` dataframe, and the model being either from `scikit-learn` or `PyTorch`. If you want to use something else, feel free to tweak the code in `helper_functions.py`!

`draw_bracket(predictions, name)`: this function will automatically save an image of your predicted bracket! Pass in the output of `simulate_tournament()` and your name, and it'll do the rest! It's a little slow, so be patient :)

`display_bracket()`: this function will show the saved image here within the notebook!

#### Good luck! If you have any questions, contact Jake Sanghavi or Geoffrey Dean
"""

# Start off by reading in the data, and get started with your modeling!
data = pd.read_csv('tournament_data.csv')

"""# Data Pre-Processing


Below we help you split up your data into training (historical data the model can use) and testing (this year's data for the model to predict on). The models can also only use numerical data (ex. "UConn" won't work), so we got rid of those columns for you too.
"""

# Split into training and testing, keeping only numerical columns
# Feel free to add columns here too!
# Just make sure to prefix them by starting them with 'TeamA' and 'TeamB' respectively,
# otherwise the bracket plotter will have some issues

'''
We split training and testing using 2024 as the testing year so you can test your models.
Once the 2025 data releases, make sure to add 2024 to your training data
and use 2025 as your testing data!
'''

# Classification
train = data[data['Season'] < 2024].drop(columns=['Season'])
train_teams = train[['TeamA', 'TeamB']]
train_X = train.drop(columns=['RegionTeamA', 'RegionTeamB', 'TeamA', 'TeamB', 'ResultTeamA', 'ScoreTeamA', 'ScoreTeamB'])

'''Uncomment the below and specify which features you want to use if you only
want to use a subset!'''
# train_X = train_X[['INSERT_FEATURES_HERE']]
train_Y = train['ResultTeamA']

'''Use this instead as train_Y if doing regression'''
# train_Y = train[['ScoreTeamA', 'ScoreTeamB']]

# Classification
test = data[data['Season'] == 2024].drop(columns=['Season'])
test_teams = test[['TeamA', 'TeamB']]
test_X = test.drop(columns=['RegionTeamA', 'RegionTeamB', 'TeamA', 'TeamB', 'ResultTeamA', 'ScoreTeamA', 'ScoreTeamB'])

'''Uncomment the below and specify which features you want to use if you only
want to use a subset!'''
# test_X = test_X[['INSERT_FEATURES_HERE']]
test_Y = test['ResultTeamA']

'''Use this as test_Y instead if doing regression'''
# test_Y = test[['ScoreTeamA', 'ScoreTeamB']]

"""# Sklearn Example

If you want to use scikit learn (non-neural network models, ex. logistic regression, KNN), you can use the below code as a jumping-off point!

We help you pre-process the data so it's ready for predicting. Make sure to look into a real classifier though! We are using `DummyClassifier` here which makes completely random predictions.
"""

from sklearn.dummy import DummyClassifier

# Create model
model = DummyClassifier(strategy='uniform')

# Train model on historical data
model.fit(train_X, train_Y)

# This code is the same whether you are using sklearn or torch!
# Your bracket will be saved to a file called 'mybracket.png'
# It's slow because it's plotting so many images! Please be patient
import matplotlib.font_manager as fm

arial_font_path = "Arial.ttf"
fm.fontManager.addfont(arial_font_path)

predictions = simulate_tournament(test, model)
draw_bracket(predictions, '[Insert Name!]')
display_bracket()

"""# PyTorch Example

If you want to use PyTorch (neural network models), you can use the below code as a jumping-off point!

We help you convert the data to tensor form so it is ready for predicting. Make sure to tweak this to make it a real neural network though though! There is no structure to the neural network right now and it is just spitting out random predictions.

Below is an example classifier neural net structure, feel free to use this as an example

``` python
class ExampleClassifier(nn.Module):
    def __init__(self):
        super().__init__()
        self.hidden1 = nn.Linear(8, 12)
        self.act1 = nn.ReLU()
        self.hidden2 = nn.Linear(12, 8)
        self.act2 = nn.ReLU()
        self.output = nn.Linear(8, 1)
        self.act_output = nn.Sigmoid()

    def forward(self, x):
        x = self.act1(self.hidden1(x))
        x = self.act2(self.hidden2(x))
        x = self.act_output(self.output(x))
        return x
```
"""

import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.preprocessing import StandardScaler

def to_tensor(df_X, df_Y):
    return torch.tensor(df_X.values, dtype=torch.float32), torch.tensor(df_Y.values, dtype=torch.float32).view(-1, 1)

# Convert data to PyTorch tensor type
train_X_tensor, train_Y_tensor = to_tensor(train_X, train_Y)
test_X_tensor, test_Y_tensor = to_tensor(test_X, test_Y)

# Define model class
class RandomNeuralNetwork(nn.Module):
    def __init__(self, input_dim, output_dim=1):
        super().__init__()
        self.output_dim = output_dim

    def forward(self, x):
        return torch.rand(x.size(0), self.output_dim)

# Create model
input_dim = train_X.shape[1]
model = RandomNeuralNetwork(input_dim)


'''
Uncomment the below (and feel free to change them) once you have made a real neural network
'''

# criterion = nn.BCELoss()
# optimizer = optim.Adam(model.parameters(), lr=0.001)

## Training loop

# epochs = 1000
# for epoch in range(epochs):
#     model.train()
#     optimizer.zero_grad()
#     outputs = model(train_X_tensor)
#     loss = criterion(outputs, train_Y_tensor)
#     loss.backward()
#     optimizer.step()
#
#     if (epoch + 1) % 100 == 0:
#         print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')

# This code is the same whether you are using sklearn or torch!
# Your bracket will be saved to a file called 'mybracket.png'

predictions = simulate_tournament(test, model)
draw_bracket(predictions, '[Insert Name!]')
display_bracket()

